name: Manual Build and Deploy

on:
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PROJECT_NAME: the-forgotten-letters

jobs:
  buildForAndroid:
    name: Build for Android
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android

    steps:
      # --- Step 1: Checkout Code ---
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # --- Step 2: Install GitHub CLI ---
      - name: Install GitHub CLI
        run: sudo apt-get install gh

      # --- Step 3: Download Large Firebase Assets ---
      - name: Download Large Firebase Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Downloading large Firebase assets..."
          TARGET_DIR="${{ github.workspace }}/Assets/Firebase/Plugins/x86_64"
          mkdir -p "$TARGET_DIR"

          gh release download Firebase-Large-Files \
            --repo ${{ github.repository }} \
            --pattern 'FirebaseCppApp-12_5_0.bundle' \
            --output "$TARGET_DIR/FirebaseCppApp-12_5_0.bundle"

          gh release download Firebase-Large-Files \
            --repo ${{ github.repository }} \
            --pattern 'FirebaseCppApp-12_5_0.so' \
            --output "$TARGET_DIR/FirebaseCppApp-12_5_0.so"

          echo "Firebase assets downloaded successfully."

      # --- Step 4: Verify Firebase Assets ---
      - name: Verify Firebase Assets
        run: ls -lh ${{ github.workspace }}/Assets/Firebase/Plugins/x86_64

      # --- Step 5: Free up disk space ---
      - uses: jlumbroso/free-disk-space@v1.3.1

      # --- Step 6: Setup Butler ---
      - name: Setup Butler
        uses: remarkablegames/setup-butler@v1

      # --- Step 7: Verify Butler Installation ---
      - name: Verify Butler Installation
        run: |
          echo "Checking Butler version..."
          butler -V || echo "❌ Butler execution failed"

      # --- Step 8: Setup Unity Cache ---
      - name: Setup Unity Cache
        uses: actions/cache@v3
        with:
          path: |
            Library
            !Library/com.unity.addressables
          key: Library-${{ matrix.targetPlatform }}-${{ github.run_id }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-

      # --- Step 9: Build Unity Project ---
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.PROJECT_NAME }}
          buildsPath: build/

      # --- Step 10: List Build Directory ---
      - name: List Build Directory
        run: ls -R build/

      # --- Step 11: Check if APK exists ---
      - name: Check if APK exists
        run: |
          APK_PATH="build/Android/${{ env.PROJECT_NAME }}.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ Error: APK file not found!"
            echo "Available files in build/Android:"
            ls -lh build/Android/
            exit 1
          fi

      # --- Step 12: Create GitHub Release ---
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: "Release v1.0.${{ github.run_number }}"
          body: "Automated release for the latest Android build."
          draft: false
          prerelease: false

      # --- Step 13: Upload APK to GitHub Release ---
      - name: Upload APK to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/Android/${{ env.PROJECT_NAME }}.apk
          asset_name: ${{ env.PROJECT_NAME }}.apk
          asset_content_type: application/vnd.android.package-archive

      # --- Step 14: Upload to Itch.io ---
      - name: Upload to Itch.io
        run: |
          APK_PATH="build/Android/${{ env.PROJECT_NAME }}.apk"
          if [ -f "$APK_PATH" ]; then
            echo "Pushing build to Itch.io..."
            butler push "$APK_PATH" ${{ vars.ITCH_USER }}/${{ vars.ITCH_GAME }}:android --verbose
          else
            echo "❌ APK not found. Skipping Itch.io upload."
            exit 1
          fi
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
