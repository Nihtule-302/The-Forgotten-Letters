name: Manual Build and Deploy

on:
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PROJECT_NAME: the-forgotten-letters

jobs:
  buildForAndroid:
    name: Build for Android
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android # Note: Even though matrix is used, paths below are hardcoded to 'Android' as requested

    steps:
      # --- Step 1: Checkout Code ---
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

            # --- Step 2: Download Large Firebase Assets (Using GitHub CLI for Private Repo compatibility) ---
      - name: Download Large Firebase Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # The GitHub CLI automatically uses this token
        run: |
          echo "Downloading large Firebase assets using GitHub CLI..."
          TARGET_DIR="${{ github.workspace }}/Assets/Firebase/Plugins/x86_64"
          mkdir -p "$TARGET_DIR"

          # Use gh release download - it handles authentication and finds the asset
          # Ensure the tag 'Firebase-Large-Files' and the asset names are correct
          gh release download Firebase-Large-Files \
            --repo ${{ github.repository }} \
            --pattern 'FirebaseCppApp-12_5_0.bundle' \
            --output "$TARGET_DIR/FirebaseCppApp-12_5_0.bundle"

          gh release download Firebase-Large-Files \
            --repo ${{ github.repository }} \
            --pattern 'FirebaseCppApp-12_5_0.so' \
            --output "$TARGET_DIR/FirebaseCppApp-12_5_0.so"

          echo "Large Firebase assets downloaded successfully."

      # --- Step 3: Free up disk space ---
      - uses: jlumbroso/free-disk-space@v1.3.1

      # --- Step 4: Setup Butler ---
      - name: Setup butler
        uses: remarkablegames/setup-butler@v1

      # --- Step 5: Verify Butler ---
      - name: Verify Butler Installation
        run: |
          echo "Checking Butler version..."
          butler -V || echo "❌ Butler execution failed"

      # --- Step 6: Setup Unity Cache ---
      - name: Setup Unity Cache
        uses: actions/cache@v3
        with:
          path: |
            Library
            !Library/com.unity.addressables
          # Keeping improved cache key for better isolation between runs/platforms
          key: Library-${{ matrix.targetPlatform }}-${{ github.sha }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-

      # --- Step 7: Build Unity Project ---
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.PROJECT_NAME }}
          buildsPath: build/ # Build output base directory

      # --- Step 8: List Build Directory ---
      - name: List Build Directory
        run: ls -R build/

      # --- Step 9: Check if APK exists (Using original working path) ---
      - name: Check if APK exists
        run: |
          # Using the path structure that was confirmed to be working
          if [ ! -f "build/Android/${{ env.PROJECT_NAME }}.apk" ]; then
            echo "❌ Error: APK file not found at build/Android/${{ env.PROJECT_NAME }}.apk!"
            exit 1
          fi

      # --- Step 10: Create GitHub Release ---
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: "Release v1.0.${{ github.run_number }}"
          body: "Automated release for the latest Android build."
          draft: false
          prerelease: false

      # --- Step 11: Upload APK to GitHub Release (Using original working path) ---
      - name: Upload APK to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Using the path structure that was confirmed to be working
          asset_path: build/Android/${{ env.PROJECT_NAME }}.apk
          asset_name: ${{ env.PROJECT_NAME }}.apk
          asset_content_type: application/vnd.android.package-archive

      # --- Step 12: Upload to Itch.io (Using original working path) ---
      - name: Upload to Itch.io
        run: |
          echo "Pushing build to Itch.io..."
          # Using the path structure that was confirmed to be working
          butler push build/Android/${{ env.PROJECT_NAME }}.apk ${{ vars.ITCH_USER }}/${{ vars.ITCH_GAME }}:android --verbose
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
